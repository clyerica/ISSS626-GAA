---
title: "2nd Order Spatial Point Patterns Analysis Methods"
format: html
---

# 1. Overview

**Second-order spatial point pattern analysis** examines the spatial relationships between points in a pattern, specifically focusing on how the presence of one point influences the location of others. It goes beyond simply describing the overall density of points (first-order effects) by investigating clustering, dispersion, or randomness at various spatial scales.

Using appropriate functions of **spatstat**, this hands-on exercise aims to discover the spatial point processes of childcare centres in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?
-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

# 2. The Data

To provide answers to the questions above, two data sets will be used. They are:

1.  *Child Care Services* data from data.gov.sg, a point feature data providing both location and attribute information of childcare centres.
2.  *Master Plan 2019 Subzone Boundary (No Sea)*, a polygon feature data providing information of URA 2019 Master Plan Planning Subzone boundary data.

# 3. Installing and Loading the R Packages

Four R packages will be used in this exercise. They are:

-   **sf**, a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.
-   **spatstat**, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.
-   **tmap** which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.
-   **tidyverse**, a family of R packages designed for modern data science. These packages are developed to work together seamlessly, sharing a common design philosophy, grammar, and data structures, which aims to make data manipulation, analysis, and visualization in R more intuitive and efficient.
-   **rvest** for scraping (or harvesting) data from web pages

The code chunk below installs and launches the five R packages

```{r}
pacman::p_load(sf, spatstat, tmap, tidyverse, rvest)
```

# 4. Data Import and Preparation

First, the following code chunk imports Master Plan 2019 Subzone (No Sea) dataset into R.

-   `st_zm()` removes Z (elevation) and M (measure) dimensions from geospatial geometries.

-   `st_transform(crs=3414)` transforms the projections to svy21

```{r}
mpsz_sf <- st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml") %>% 
  st_zm(drop = TRUE, what = "ZM") %>% st_transform(crs = 3414)
```

```{r}
extract_kml_field <- function(html_text, field_name) {
  if (is.na(html_text) || html_text == "") return(NA_character_)
  
  page <- read_html(html_text)
  rows <- page %>% html_elements("tr")
  
  value <- rows %>%
    keep(~ html_text2(html_element(.x, "th")) == field_name) %>%
    html_element("td") %>%
    html_text2()
  
  if (length(value) == 0) NA_character_ else value
}
```

Next we filter out the regions of interest (Choa Chu Kang and Tampines planning regions)

```{r}
mpsz_sf <- mpsz_sf %>%
  mutate(
    REGION_N = map_chr(Description, extract_kml_field, "REGION_N"),
    PLN_AREA_N = map_chr(Description, extract_kml_field, "PLN_AREA_N"),
    SUBZONE_N = map_chr(Description, extract_kml_field, "SUBZONE_N"),
    SUBZONE_C = map_chr(Description, extract_kml_field, "SUBZONE_C")
  ) %>%
  select(-Name, -Description) %>%
  relocate(geometry, .after = last_col())
```

```{r}
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
```

As a good practice, we plot the regions to view geometry

```{r}
par(mfrow=c(1,2))
plot(st_geometry(tm), main = "Tampines")
plot(st_geometry(ck), main = "Choa Chu Kang")
```

Next, we will convert these sf objects into owin objects as required by spatstat.

```{r}
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
```

The following code chunk imports the childcare services data and does the necessary transformation for to correct the projection of the data.

```{r}
childcare_sf <- st_read("data/ChildCareServices.geojson") %>% 
  st_zm(drop = TRUE, what = "ZM") %>%
  st_transform(crs = 3414)
```

As **spatstat** requires the point event data in **ppp** object form., the code chunk below uses `as.ppp()` of **spatstat** package to convert `childcare_sf` to **ppp** format.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
```

Next, we extract the relevant event points from the selected target planning areas.

```{r}
childcare_tm_ppp = childcare_ppp[tm_owin]
childcare_ck_ppp = childcare_ppp[ck_owin]
```

The code chunk below plots the extracted planning areas to review the selected areas and spatial patterns

```{r}
par(mfrow=c(1,2))
plot(unmark(childcare_tm_ppp), 
  main="Tampines")
plot(unmark(childcare_ck_ppp), 
  main="Choa Chu Kang")
```

# 5. Analysing Spatial Point Process using G-Function

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, we will compute G-function estimation by using `Gest()` of **spatstat** package. We will also learn how to perform monte carlo simulation test using `envelope()` of **spatstat** package.

## 5.1 Choa Chu Kang Planning Area

### 5.1.1 Computing G-function estimation

```{r}
set.seed(1234)
```

The code chunk below is used to compute G-function using `Gest()` of **spatstat** package.

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

### 5.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.
-   H1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-function

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

## 5.2 Tampines Planning Area

### 5.2.1 Computing G-function estimation

```{r}
G_TM = Gest(childcare_tm_ppp, correction = "best")
plot(G_TM, xlim=c(0,500))
```

### 5.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Tampines are randomly distributed.
-   H1 = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-function

```{r}
G_TM.csr <- envelope(childcare_tm_ppp, Gest, nsim = 999)
```

```{r}
plot(G_TM.csr)
```

# 6. Analysis Spatial Point Process Using F-Function

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, we will compute F-function estimation by using `Fest()` of **spatstat** package. We will also perform monte carlo simulation test using `envelope()` of **spatstat** package.

## 6.1 Choa Chu Kang Planning Area

### 6.1.1 Computing F-function estimation

The code chunk below is used to compute F-function using `Fest()` of **spatstat** package.

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

### 6.1.2 Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.
-   H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-function

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK)
```

## 6.2 Tampines Planning Area

### 6.2.1 Computing F-function estimation

The code chunk below is used to compute F-function using `Fest()` of **spatstat** package.

```{r}
F_TM = Fest(childcare_tm_ppp, correction = "best")
plot(F_TM)
```

### 6.2.2 Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Tampines are randomly distributed.
-   H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-function

```{r}
F_TM.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_TM.csr)
```

# 7. Analysing Spatial Point Process Using K-Function

K-function measures the number of events found up to a given distance of any particular event. In this section, we will compute K-function estimates by using `Kest()` of spatstat package. We will also perform monte carlo simulation test using `envelope()` of **spatstat** package.

## 7.1 Choa Chu Kang Planning Area

### 7.1.1 Computing K-function estimate

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, 
     ylab= "K(d)-r", 
     xlab = "d(m)")
```

### 7.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.
-   H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

## 7.2 Tampines Planning Area

### 7.2.1 Computing K-function estimate

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", 
     xlab = "d(m)",
     xlim=c(0,1000))
```

### 7.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Tampines are randomly distributed.
-   H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

# 9. Analysing Spatial Point Function Using L-function

## 9.1 Choa Chu Kang Planning Area

### 9.1.1 Computing L-function Estimation

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

### 9.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.
-   H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

## 9.2 Tampines Planning Area

### 9.2.1 Computing L-function Estimation

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)",
     xlim=c(0,1000))
```

### 9.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

-   Ho = The distribution of childcare services at Tampines are randomly distributed.
-   H1 = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
L_tm.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
