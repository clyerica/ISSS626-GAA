---
title: "Geospatial Data Wrangling with R"
author: "Erica Chan"
---

# 1. Getting Started

## 1.1 Install and launching R packages

This code chunk uses `p_load()` to check if **sf** and **tidyverse** packages are installed

-   **sf**: imports, manages and processes geosptial data
-   **tidyverse**: performs data science tasks such as importing, wrangling and visualising data.

```{r}
pacman::p_load(sf, tidyverse)
```

## 1.2 Import the data using st_read()

The following code chunk imports the relevant geospatial data files:

-   `mpsz`: Master plan 2014 Subzone Boundary form data.gov.sg (polygon feature layer)
    -   As this file is a shapefile, `dsn` is used to define the data path and `layer` provides the shapefile name, without needing to use the file extension
-   `cyclingpath`: Cycling paths from LTADataMall (line feature layer)
-   `preschool`: Preschool locations from data.gov.sg (point feature layer)
    -   As this file is in kml format, the full file path and kml file extension is provided

```{r}
mpsz = st_read(dsn = "data/geospatial",
               layer = "MP14_SUBZONE_WEB_PL")
cyclingpath = st_read(dsn = "data/geospatial", 
                      layer = "CyclingPathGazette")
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

## 1.3 Checking content of simple feature data frame

### st_geometry()

The code chunk below displays the geometry list-column (basic geospatial feature information)

```{r}
st_geometry(mpsz)
```

### glimpse()

The code chunk below displays associated attribute information in the data frame, including the data type of each field.

```{r}
glimpse(mpsz)
```

### head()

The code chunk below displays complete information of a feature object. `n` allows users to select the number of records displayed

```{r}
head(mpsz, n=3)  
```

# 2 Plotting Geospatial Data

## 2.1 plot()

The default plot of an sf object is a multiplot of all attributes, up to a reasonable maximum as displayed below.

```{r}
plot(mpsz)
```

To plot only the geometry, the code chunk below can be used

```{r}
plot(st_geometry(mpsz))
```

The sf object can also be plotted using a specific attribute as shown below

```{r}
plot(mpsz["PLN_AREA_N"])
```

### Plotting the preschool layer over the mpsz layer - Pt.1

Preschool point objects fail to plot on top of the mpsz layer in the following code chunk as each simple feature dataframe is using different coordinate systems. The next section will address this issue

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschool), 
     add = TRUE)
```

## 2.2 Projection

### 2.2.1 Assigning EPSG code

The coordinate system of the mpsz simple data frame can be viewed using `st_crs()` of the **sf** package as shown in the code chunk below

```{r}
st_crs(mpsz)
```

The EPSG code of the mpsz data frame is wrong as the correct code for szy21 should be 3414

`st_set_crs()` of the **sf** package is used to correct the EPSG code of the mpsz dataframe. We then check the CSR again using `st_crs()`.

```{r}
mpsz <- st_set_crs(mpsz, 3414)
st_crs(mpsz)
```

The EPSG code is now 3414.

### 2.2.2 Transforming projection

The preschool simple feature data frame is in wgs84 coordinate system as seen below.

```{r}
st_crs(preschool)
```

To reproject preschool from one coordinate system to another coordinate system mathematically. `st_transform()` should be used instead of `st_set_crs()`. This is shown in the following code chunk

```{r}
preschool <- st_transform(preschool, 
                              crs = 3414)
st_crs(mpsz)
```

#### Plotting the preschool layer over the mpsz layer - Pt.2

With the corrected coordinate systems for both layers, the preschool point layer can now be plotted on top of the mpsz layer.

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschool), add = TRUE)
```

# 3. Aspatial data

## 3.1 Importing aspatial data

This section will use the listings.csv data from AirBnb. This is aspatial data, as it is not geospatial data but it includes two data fields which capture the x and y coordinates of the data points

`read_csv()` of **readr** package will be used to import the data into a tibble data frame

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

`list()` of Base R will be used to examine the data file to confirm it was imported correctly

```{r}
list(listings)
```

The latitude and longitude fields will be used as the x and y coordinates for the next phase. They are in decimal degree format. We will assume that the data is in wgs84 Geographic Coordinate System.

## 3.2 Creating a simple data frame from an aspatial data frame

The code chunk below converts listing data frame into a simple feature data frame by using `st_as_sf()` of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

-   `coords`: provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.
-   `crs`: provide the coordinates system in epsg format.
-   `%>%` is used to nest `st_transform()` to transform the newly created simple feature data frame into svy21 projected coordinates system.

```{r}
glimpse(listings_sf)
```

To plot the listing_sf layer on top of the mpsz layer, we will transform the coordinate system for the listing_sf layer to szy21, then plot the layers.

```{r}
listings_sf <- st_as_sf(listings, 
                        coords = c("longitude", "latitude"),
                        crs=4326) %>%
  st_transform(crs = 3414)
glimpse(listings_sf)
plot(st_geometry(mpsz))
plot(st_geometry(listings_sf), add = TRUE)
```

# 4. Geoprocessing

This section will use the **sf** package answer GIS questions

## 4.1 Use case 1: Land acquisition analysis

### Scenario

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

### Solution

First, `st_buffer()` of **sf** package is used to compute the 5-meter buffers around the paths. Next, the area is calculated and `sum()` of Base R is used to derive the total land needed.

```{r}
buffer_cycling <- st_buffer(
  cyclingpath, dist=5, nQuadSegs = 30)
buffer_cycling$AREA <- st_area(buffer_cycling)
buffer_cycling <- buffer_cycling %>%
  mutate(AREA = st_area(geometry))
sum(buffer_cycling$AREA)
```

### Creating a plot to show the buffer of a selected subzone

First `filter()` of **splyr** package can be used to extract the polygon feture of Tampines west using the code chunk below.

```{r}
mpsz_selected <- mpsz %>%
  filter(SUBZONE_N == "TAMPINES WEST") 
```

The EPSG code for buffer_cycling needs correction to 3414 instead of 9001

```{r}
st_crs(buffer_cycling)
buffer_cycling <- st_set_crs(buffer_cycling, 3414)
```

Next, `st_intersection()` of **sf** package will be used to clip cycling buffers within Tampines West planning subzone.

```{r}
buffer_cycling_selected <- st_intersection(
  buffer_cycling, mpsz_selected)
```

Lastly `plot()` of R Graphic will be used to create the plot below

```{r}
plot(st_geometry(buffer_cycling_selected))
```

## 4.2 Use case 2: Determine the number of pre-schools by planning subzone

### Scenario

The authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, perform the necessary geoprocessing to compute these counts and present the results clearly.

### Solution

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using `st_intersects()`. Next, `length()` of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz$`PreSch Count`<- lengths(st_intersects(mpsz, preschool))
```

The summary statistics of Presch Count can be viewed using `summary()`

```{r}
summary(mpsz$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the `top_n()` of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz, 1, `PreSch Count`)
```

`st_area()` of **sf** package is used to derive the area of each planning subzone

```{r}
mpsz$Area <- mpsz %>%
  st_area()
```

`mutate()` of **dplyr** package is then used to compute density

```{r}
mpsz <- mpsz %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

### Plotting with ggplot2

As `hist()` of R Graphics has limited customisability, **ggplot2** is useful for tailoring graphics to meet publication quality

```{r}
ggplot(data=mpsz, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-schools evenly distributed in Singapore?",
       subtitle= "There are many planning subzones with a single pre-school, on the other hand, \nthere are seven planning subzones with at least 30 or more pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency") +
      theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
```

The following code chunk plots a scatterplot showing the relaitonship between Pre-school density and Pre-school Count using ggplot2

```{r}
ggplot(data=mpsz, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
